I. 作用域闭包
当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数实在当前词法作用域之外执行。

I.1: 并不是真正的闭包
function foo(){
var a = 2;

      function bar(){
        console.log(a);
      }

      bar();

}

foo();
----->bar()可以访问外部作用域中的变量 a, 确切的说，并不是真正的闭包。
----->bar()对 a 的引用的方法时词法作用域的查找规则, 而这些规则只是闭包的一部分。

I.2 真正的闭包
function foo(){
var a =2;
function bar(){
console.log(a);
}

return bar;
}

var baz = foo();
baz(); //闭包的效果
在 foo()执行之后， 通常会想到让 foo()的整个内部作用域都会销毁，因为我们知道引擎有
来及回收期来释放不再使用的内存空间, 犹豫看上去 foo()的内容不再会被使用, 所以很自然
的会考虑对其进行回收。
然而，闭包的神奇治狐臭在于阻止这件事情的发生, 事实上内部作用域依然存在，因此没有被
回收，bar()所声明的位置，它拥有涵盖 foo()内部作用域的闭包,使得该作用域能够一直存货，
以供 bar()在任何时间进行引用。
-----》bar()依然持有对该作用域的引用，这个引用就是闭包。

II: 经常见的闭包案例
function wait(message)
{
setTimeout(function timer(){
console.log(message);
}, 1000)
}
//因为闭包的原因，timer 函数可以一直引用 message 变量作用域。

III: 循环和闭包
